input{
    file{
        path => "D:/elasticstack/doc/access_log"
        start_position => "beginning"
    }
}

filter{

    
        grok {
            match => {"message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"'}
        }

        if "_grokparsefailure" in [tags]{
                drop {}
        }

        useragent{
            source => "agent"
            target => "os"
        }

        mutate {
            add_field =>{
                "host_name" =>"%{[host][name]}"
                "verb" =>"%{[http][request][method]}"
                "http_version" =>"%{[http][version]}"
                "status_code" =>"%{[http][response][status_code]}"
                "log_time" =>"%{[timestamp]}"
                "req_ip" =>"%{[source][address]}"
                "os_name" => "%{[os][os][name]}"
                "os_full_name" => "%{[os][os][full]}"
                "os_version" => "%{[os][os][version]}"
                "browser_name" => "%{[os][name]}"
                "browser_varsion" =>"%{[os][version]}"
            }

            remove_field => [ "http","@version", "log", "event","host","url","source","os","message" ] 
        }
        

        ip2location {
            source => "req_ip"
        }


ruby {
    code => '
        l = event.get("ip2location")
        if l
            l.each { |k, v|
                if v == "Not_Supported"
                    event.remove("[ip2location][#{k}]")
                end
            }
        end
    '
    }

ruby{
    code => "
        str = event.get('referrer');
        v =  (str =~ /=/);
        v_data = str[v+1, str.length];
        v_app = (v_data =~ /:/i);
        a = v_data[0,v_app];
        b = v_data[v_app+1,v_data.length];
        v_page_id = (b =~ /:/i);
        c = b[0,v_page_id];
        d = b[v_page_id+1,b.length];
        v_session_id = (d =~ /:/i);
        e = d[0,v_session_id];
        event.set('app_id',a);
        event.set('page_id',c);
        event.set('app_session',e);
    "
}

    
    
}

output{
    stdout {
        codec => rubydebug
    }
}